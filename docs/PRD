# ASimpleStarGazer 产品需求文档（PRD）

## 1. 背景与目标
### 背景
随着天文爱好者数量的增加，用户希望能有一款本地/云端都能使用的多语言观星助手。现有的观星应用大多功能单一或依赖联网，缺乏本地 RAG（检索增强生成）与多语言支持。

### 产品目标
- 提供一个跨平台（Web、移动端）的观星助手  
- 集成 RAG、FAISS/ChromaDB、本地/云部署，保证离线可用性  
- 支持多语言交互（中文、英文、日语等），满足全球观星用户  
- 融合实用功能（天气、月相、星图、光污染指数），提升用户观星体验  

---

## 2. 用户画像
- **天文爱好者**：业余观星者，希望快速查询星象、月相、适合观测的时间地点  
- **学生与教师**：在课堂或科研中需要实时星象数据与交互式解释  
- **户外旅行者**：计划周末露营/旅行时，想知道适合观星的时间与地点  
- **技术爱好者**：对 AI、本地 RAG、LangChain 等有兴趣的开发者  

---

## 3. 核心功能
### 3.1 信息检索与问答
- 支持自然语言提问（如 “今晚悉尼能看到哪些星座？”）  
- 本地 RAG 检索星象知识库（星座、行星、深空天体）  
- 接入外部 API（天气、光污染地图、月相数据）  

### 3.2 观测辅助工具
- **天气查询**：云量、能见度、湿度  
- **月相查询**：精确到日  
- **光污染指数**：基于地理坐标实时显示  
- **星图展示**：交互式星空模拟  

### 3.3 多语言支持
- MCP Server 多语言实现（Python/Node/Java）  
- 自动识别用户输入语言并切换回答语言  

### 3.4 部署与扩展
- **本地运行**：通过 Docker 或桌面端 App  
- **云端运行**：AWS/GCP/Azure 部署  
- **插件化**：开发者可接入新 API（如 NASA 数据、望远镜控制接口）  

---

## 4. 技术架构
- **前端**：React + Tailwind，支持移动端自适应  
- **后端**：FastAPI（Python） + Node.js/Java MCP Server  
- **数据库**：MySQL（用户数据）、FAISS/ChromaDB（向量检索）  
- **模型**：Ollama/DeepSeek Embedding + LLM (可替换 OpenAI/本地模型)  
- **部署**：Docker + GitHub Actions CI/CD  

---

## 5. 需求优先级
| 优先级 | 功能 | 描述 |
|--------|------|------|
| P0 | 天气、月相、光污染 API 查询 | 保证核心观测功能可用 |
| P0 | 本地 RAG 检索 | 离线模式核心功能 |
| P1 | 星图交互 | 提升用户体验 |
| P1 | 多语言支持 | 覆盖全球用户 |
| P2 | 插件化扩展 | 面向开发者生态 |
| P3 | 社区功能 | 用户分享观测体验 |

---

## 6. 成功指标（KPI）
- **功能性**：用户可在 3 秒内获取观星数据  
- **可用性**：支持至少 5 种语言，90% 的语义理解准确  
- **性能**：本地查询延迟 < 2 秒，云端 < 1 秒  
- **增长指标**：上线 3 个月，达到 1000+ 活跃用户  

---

## 7. 未来规划
- 集成 **AI 图像识别**：上传星空照片识别星座  
- 支持 **望远镜控制**：与智能望远镜联动  
- 开放 **开发者 API**：扩展 RAG 知识库与插件生态  
