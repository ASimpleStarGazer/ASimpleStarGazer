name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # PR validation
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert

      - name: Check for merge conflicts
        run: |
          git merge-tree $(git merge-base HEAD main) HEAD main | grep -q "<<<<<<< " && exit 1 || exit 0

      - name: Validate submodule updates
        run: |
          # Check if submodules are properly updated
          git submodule status | while read line; do
            status=$(echo $line | cut -c1)
            if [ "$status" = "-" ]; then
              echo "Error: Submodule not initialized: $line"
              exit 1
            fi
          done

  # Code quality checks
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Python code quality
      - name: Python code quality
        run: |
          pip install flake8 black isort mypy bandit safety
          
          # Check Python MCP server if exists
          if [ -d "MCP_servers/ASimpleStargGazer_python" ]; then
            cd MCP_servers/ASimpleStargGazer_python
            
            # Install dependencies for type checking
            pip install -r requirements.txt
            
            # Code formatting
            echo "Checking Python code formatting..."
            black --check --diff . || echo "Black formatting issues found"
            
            # Import sorting
            echo "Checking Python imports..."
            isort --check-only --diff . || echo "Import sorting issues found"
            
            # Linting
            echo "Running Python linting..."
            flake8 . --count --statistics || echo "Flake8 issues found"
            
            # Type checking
            echo "Running Python type checking..."
            mypy . --ignore-missing-imports || echo "MyPy type issues found"
            
            # Security scanning
            echo "Running Python security scan..."
            bandit -r . -f json || echo "Bandit security issues found"
            
            # Dependency vulnerability check
            echo "Checking Python dependencies for vulnerabilities..."
            safety check || echo "Safety vulnerability issues found"
            
            cd ../..
          fi

      # Node.js code quality
      - name: Node.js code quality
        run: |
          # Check Node.js MCP server
          if [ -d "MCP_servers/ASimpleStargGazer_node" ]; then
            cd MCP_servers/ASimpleStargGazer_node
            
            npm ci
            
            # Linting
            echo "Running Node.js linting..."
            npm run lint || echo "ESLint issues found"
            
            # Type checking
            echo "Running TypeScript type checking..."
            npx tsc --noEmit || echo "TypeScript type issues found"
            
            # Security audit
            echo "Running Node.js security audit..."
            npm audit --audit-level=moderate || echo "npm audit issues found"
            
            cd ../..
          fi
          
          # Check Frontend applications
          if [ -d "ASimpleStargGazer_frontend" ]; then
            cd ASimpleStargGazer_frontend
            
            npm ci
            
            echo "Running frontend linting..."
            npm run lint || echo "ESLint issues found in frontend"
            
            if [ -f "tsconfig.json" ]; then
              echo "Running frontend type checking..."
              npx tsc --noEmit || echo "TypeScript type issues found in frontend"
            fi
            
            echo "Running frontend security audit..."
            npm audit --audit-level=moderate || echo "npm audit issues found in frontend"
            
            cd ..
          fi

      # .NET code quality
      - name: .NET code quality
        run: |
          if [ -d "MCP_servers/ASimpleStargGazer_dotnet" ]; then
            cd MCP_servers/ASimpleStargGazer_dotnet
            
            # Restore packages
            dotnet restore
            
            # Code formatting check
            echo "Checking .NET code formatting..."
            dotnet format --verify-no-changes --verbosity minimal || echo ".NET formatting issues found"
            
            # Build with warnings as errors
            echo "Building .NET with strict warnings..."
            dotnet build --configuration Release --verbosity minimal -p:TreatWarningsAsErrors=true || echo ".NET build warnings found"
            
            # Security scanning
            echo "Running .NET security scan..."
            dotnet list package --vulnerable --include-transitive || echo ".NET vulnerability issues found"
            
            cd ../..
          fi

  # Test coverage
  coverage:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stargazer_test
          MYSQL_USER: sg_test
          MYSQL_PASSWORD: sgpass_test
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Python test coverage
        if: hashFiles('MCP_servers/ASimpleStargGazer_python/**') != ''
        working-directory: MCP_servers/ASimpleStargGazer_python
        env:
          REDIS_URL: redis://localhost:6379/0
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_DB: stargazer_test
          MYSQL_USER: sg_test
          MYSQL_PASSWORD: sgpass_test
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=html || echo "Python tests completed"

      - name: Node.js test coverage
        if: hashFiles('MCP_servers/ASimpleStargGazer_node/**') != ''
        working-directory: MCP_servers/ASimpleStargGazer_node
        run: |
          npm ci
          npm run test:coverage || echo "Node.js tests completed"

      - name: Frontend test coverage
        if: hashFiles('ASimpleStargGazer_frontend/**') != ''
        working-directory: ASimpleStargGazer_frontend
        run: |
          npm ci
          npm run test:coverage || npm test || echo "Frontend tests completed"

      - name: .NET test coverage
        if: hashFiles('MCP_servers/ASimpleStargGazer_dotnet/**') != ''
        working-directory: MCP_servers/ASimpleStargGazer_dotnet
        run: |
          dotnet restore
          dotnet test --collect:"XPlat Code Coverage" --results-directory ./coverage || echo ".NET tests completed"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            MCP_servers/ASimpleStargGazer_python/coverage.xml
            MCP_servers/ASimpleStargGazer_node/coverage/lcov.info
            MCP_servers/ASimpleStargGazer_dotnet/coverage/**/coverage.cobertura.xml
            ASimpleStargGazer_frontend/coverage/lcov.info
          fail_ci_if_error: false

  # Performance benchmarks
  performance:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run performance benchmarks
        run: |
          # Add performance benchmark scripts here
          echo "Performance benchmarks placeholder"
          # This could include:
          # - Load testing MCP servers
          # - Frontend performance metrics
          # - Database query performance
          # - Memory usage analysis

  # Auto-assign reviewers
  assign-reviewers:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Auto-assign reviewers
        uses: kentaro-m/auto-assign-action@v1.2.5
        with:
          configuration-path: '.github/auto-assign.yml'