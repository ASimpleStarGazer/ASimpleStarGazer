name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  DOTNET_VERSION: '8.0.x'

jobs:
  # Detect changes in submodules to optimize builds
  changes:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      dotnet: ${{ steps.changes.outputs.dotnet }}
      node: ${{ steps.changes.outputs.node }}
      frontend: ${{ steps.changes.outputs.frontend }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.SUBMODULES_PAT }}
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python:
              - 'MCP_servers/ASimpleStargGazer_python/**'
            dotnet:
              - 'MCP_servers/ASimpleStargGazer_dotnet/**'
            node:
              - 'MCP_servers/ASimpleStargGazer_node/**'
            frontend:
              - 'ASimpleStargGazer_frontend/**'
            infra:
              - 'ASimpleStargGazer_Infra/**'
              - 'docker-compose.yml'

  # Python MCP Server CI
  python-mcp:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || github.event_name == 'push'
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stargazer_test
          MYSQL_USER: sg_test
          MYSQL_PASSWORD: sgpass_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('MCP_servers/ASimpleStargGazer_python/requirements.txt') }}

      - name: Install Python dependencies
        working-directory: MCP_servers/ASimpleStargGazer_python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run Python linting
        working-directory: MCP_servers/ASimpleStargGazer_python
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          black --check . || true
          isort --check-only . || true

      - name: Run Python tests
        working-directory: MCP_servers/ASimpleStargGazer_python
        env:
          REDIS_URL: redis://localhost:6379/0
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_DB: stargazer_test
          MYSQL_USER: sg_test
          MYSQL_PASSWORD: sgpass_test
        run: |
          pytest --cov=. --cov-report=xml || echo "No tests found"

      - name: Test MCP server startup
        working-directory: MCP_servers/ASimpleStargGazer_python
        env:
          REDIS_URL: redis://localhost:6379/0
          MYSQL_HOST: localhost
        run: |
          timeout 10s python ASimpleStarGazer.py || echo "MCP server test completed"

  # .NET MCP Server CI
  dotnet-mcp:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.dotnet == 'true' || github.event_name == 'push'
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stargazer_test
          MYSQL_USER: sg_test
          MYSQL_PASSWORD: sgpass_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('MCP_servers/ASimpleStargGazer_dotnet/**/*.csproj') }}

      - name: Restore .NET dependencies
        working-directory: MCP_servers/ASimpleStargGazer_dotnet
        run: dotnet restore

      - name: Build .NET projects
        working-directory: MCP_servers/ASimpleStargGazer_dotnet
        run: |
          dotnet build --no-restore --configuration Release
          dotnet build ASimpleStarGazer_dotNet/ASimpleStarGazer_dotNet.csproj --no-restore --configuration Release

      - name: Run .NET tests
        working-directory: MCP_servers/ASimpleStargGazer_dotnet
        run: |
          dotnet test --no-build --configuration Release --verbosity normal || echo "No tests found"

      - name: Test MCP server startup
        working-directory: MCP_servers/ASimpleStargGazer_dotnet
        env:
          ConnectionStrings__DefaultConnection: "Server=localhost;Database=stargazer_test;User=sg_test;Password=sgpass_test;"
        run: |
          timeout 10s dotnet run --project ASimpleStarGazer_dotNet/ASimpleStarGazer_dotNet.csproj --no-build --configuration Release || echo "MCP server test completed"

  # Node.js MCP Server CI
  node-mcp:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.node == 'true' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: MCP_servers/ASimpleStargGazer_node/package-lock.json

      - name: Install Node.js dependencies
        working-directory: MCP_servers/ASimpleStargGazer_node
        run: npm ci

      - name: Run Node.js linting
        working-directory: MCP_servers/ASimpleStargGazer_node
        run: |
          npm run lint || echo "No lint script found"

      - name: Build Node.js project
        working-directory: MCP_servers/ASimpleStargGazer_node
        run: npm run build

      - name: Run Node.js tests
        working-directory: MCP_servers/ASimpleStargGazer_node
        run: |
          npm test || echo "No tests found"

      - name: Test MCP server startup
        working-directory: MCP_servers/ASimpleStargGazer_node
        run: |
          timeout 10s node build/index.js || echo "MCP server test completed"

  # Frontend Application CI
  frontend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ASimpleStargGazer_frontend/package-lock.json

      - name: Install dependencies
        working-directory: ASimpleStargGazer_frontend
        run: npm ci

      - name: Run linting
        working-directory: ASimpleStargGazer_frontend
        run: npm run lint

      - name: Run type checking
        working-directory: ASimpleStargGazer_frontend
        run: npx tsc --noEmit || echo "No TypeScript configuration found"

      - name: Build application
        working-directory: ASimpleStargGazer_frontend
        run: npm run build

      - name: Run tests
        working-directory: ASimpleStargGazer_frontend
        run: |
          npm test || echo "No tests found"

  # Infrastructure validation
  infrastructure:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.infra == 'true' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Validate Docker Compose
        run: |
          docker-compose config
          docker-compose pull

      - name: Setup Terraform
        if: hashFiles('ASimpleStargGazer_Infra/terraform/**/*.tf') != ''
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        if: hashFiles('ASimpleStargGazer_Infra/terraform/**/*.tf') != ''
        working-directory: ASimpleStargGazer_Infra/terraform
        run: terraform fmt -check

      - name: Terraform Validate
        if: hashFiles('ASimpleStargGazer_Infra/terraform/**/*.tf') != ''
        working-directory: ASimpleStargGazer_Infra/terraform
        run: |
          terraform init -backend=false
          terraform validate

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: [python-mcp, dotnet-mcp, node-mcp, frontend]
    if: always() && (needs.python-mcp.result == 'success' || needs.dotnet-mcp.result == 'success' || needs.node-mcp.result == 'success')
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stargazer_test
          MYSQL_USER: sg_test
          MYSQL_PASSWORD: sgpass_test
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Setup Node.js for MCP Inspector
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install MCP Inspector
        run: npm install -g @modelcontextprotocol/inspector

      - name: Setup Python for integration tests
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run MCP server integration tests
        run: |
          # Add integration test scripts here
          echo "Integration tests placeholder - implement MCP server communication tests"

  # Security scanning
  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
